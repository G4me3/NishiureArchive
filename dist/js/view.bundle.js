/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (function() { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/view.ts":
/*!*********************!*\
  !*** ./src/view.ts ***!
  \*********************/
/***/ (function() {

eval("\n// // 2023/03/07\n// import Mirador from \"mirador\";\n// getCSV(new URL(\"database.csv\", \"http://127.0.0.1:5500/dist/\"));// 本番：パスを変更\n// //processes about CSV\n// function getCSV(URLObj: URL) {\n//     const req = new XMLHttpRequest();\n//     const url = new URL(URLObj);\n//     req.open(\"get\", url, true);\n//     req.send(null);\n//     //if csv could get, call convertCSVtoArray()\t\n//     req.onload = function () {\n//         convertCSVtoArray(req.responseText, URLObj);\n//     }\n// }\n// //chage CSV to two-dimensional array\n// function convertCSVtoArray(str: String, URLObj: URL) {\n//     let result = [];\n//     let result2 = [];\n//     let tmp = str.split(\"\\n\");\n//     if (URLObj.toString() == \"http://127.0.0.1:5500/dist/database.csv\") {//本番：パスの変更\n//         // create two-dimensional array separate each lows in \",\"\n//         for (let i = 0; i < tmp.length; ++i) {\n//             result[i] = tmp[i].split(',');\n//         }\n//         for (let i = 0; i < result.length; i++) {\n//             for (let o = 0; o < result[i].length; o++) {\n//                 if (result[i][o].indexOf(\"\\r\") != -1 && result[i][o] != undefined) {\n//                     result[i][o] = result[i][o].substr(0, result[i][o].indexOf(\"\\r\"))\n//                 }\n//             }\n//         }\n//         makeRelationalList(result);\n//         makeCatalogList(result);\n//     }\n// }\n// //get parameter from URL\n// function getParam(name: String, url: string) {\n//     if (url == \"\") url = window.location.href;\n//     name = name.replace(/[\\[\\]]/g, \"\\\\$&\");\n//     var regex = new RegExp(\"[?&]\" + name + \"(=([^&#]*)|&|#|$)\"),\n//         results = regex.exec(url);\n//     if (!results) return null;\n//     if (!results[2]) return '';\n//     return decodeURIComponent(results[2].replace(/\\+/g, \" \"));\n// }\n// const manifest = getParam(\"manifest1\", \"\");\n// function makeRelationalList(result: String[][]) {\n//     let manifests = [];\n//     let manifestCategory = 0;\n//     if (manifest !== null) {\n//         manifestCategory = Number(manifest.substr((manifest.indexOf(\".json\") - 1), 1));\n//         for (let i = 3; i < result[manifestCategory - 1].length; i++) {\n//             manifests.push({ author: result[manifestCategory - 1][i], title: result[manifestCategory - 1][++i], url: result[manifestCategory - 1][++i] });\n//         }\n//     }\n//     let otherReferences = document.getElementById(\"other-references\");\n//     for (let i = 0; i < manifests.length; i++) {\n//         if (manifests[i].url != manifest && otherReferences !== null) {\n//             otherReferences.innerHTML += `\n//                 <div class='book-data'>\n//                     <a class='relation-link' href='./view.html?manifest1=${manifests[i].url}'>\n//                     <img class='book' src='./img/${manifests[i].author}_thumbnail.jpg' alt='thumbnail image'><br>\n//                     <p class='des'>${manifests[i].author}<br>${manifests[i].title}</p>\n//                 </div>`;\n//         }\n//     }\n// }\n// //make catalog list and give it to function making Mirador instance \n// function makeCatalogList(result: String[][]) {\n//     let catalogContents = [];\n//     let manifestCategory = 0\n//     if (manifest !== null) {\n//         manifestCategory = Number(manifest.substr((manifest.indexOf(\".json\") - 1), 1));\n//         for (let i = 0; i < result[manifestCategory - 1].length; i++) {\n//             if (result[manifestCategory - 1][i].indexOf('manifest') != -1) {\n//                 const manifestURL = result[manifestCategory - 1][i];\n//                 catalogContents.push({ manifestId: manifestURL });\n//             }\n//         }\n//     }\n//     makeMiradorInstance(catalogContents);\n// }\n// function makeMiradorInstance(catalogContents: any) {\n//     //get manifest from query\n//     let manifests = []\n//     let config: any = {};\n//     for (let i = 1; i <= 4; i++) {\n//         if (getParam(\"manifest\" + i, \"\") != null) {\n//             manifests.push(getParam(\"manifest\" + i, \"\"));\n//         }\n//     }\n//     if (manifests.length == 1) { // one literature\n//         config = {\n//             id: \"viewer\",\n//             windows: [\n//                 {\n//                     loadedManifest: manifests[0]\n//                 }\n//             ],\n//             catalog: [{\n//             }\n//             ],\n//             window: {\n//                 highlightAllAnnotations: true,\n//                 sideBarOpen: true,\n//                 panels: {\n//                     \"info\": true,\n//                     \"attribution\": true,\n//                     \"canvas\": true,\n//                     \"annotations\": true,\n//                     \"search\": true,\n//                     \"layers\": false,\n//                 }\n//             }\n//         };\n//         // //add relational literature at catalog of Mirador\n//         // for (manifest of catalogContents) {\n//         //     config.catalog.push(manifest);\n//         // }\n//         //わからん\n//         for (const manifest of catalogContents) {\n//             config.catalog.push(manifest);\n//         }\n//     } else if (manifests.length == 2) { //two literature\n//         config = {\n//             id: \"viewer\",\n//             windows: [\n//                 {\n//                     loadedManifest: manifests[0]\n//                 },\n//                 {\n//                     loadedManifest: manifests[1]\n//                 }\n//             ],\n//             catalog: [\n//             ],\n//             window: {\n//                 highlightAllAnnotations: true,\n//                 sideBarOpen: false,\n//                 panels: {\n//                     \"info\": true,\n//                     \"attribution\": true,\n//                     \"canvas\": true,\n//                     \"annotations\": true,\n//                     \"search\": true,\n//                     \"layers\": false,\n//                 }\n//             }\n//         };\n//         //add relational literature at catalog of Mirador\n//         for (const manifest of catalogContents) {\n//             config.catalog.push(manifest);\n//         }\n//     }\n//     else if (manifests.length == 3) { //three literature\n//         config = {\n//             id: \"viewer\",\n//             windows: [\n//                 {\n//                     loadedManifest: manifests[0]\n//                 },\n//                 {\n//                     loadedManifest: manifests[1]\n//                 },\n//                 {\n//                     loadedManifest: manifests[2]\n//                 }\n//             ],\n//             catalog: [\n//             ],\n//             window: {\n//                 highlightAllAnnotations: true,\n//                 sideBarOpen: false,\n//                 panels: {\n//                     \"info\": true,\n//                     \"attribution\": true,\n//                     \"canvas\": true,\n//                     \"annotations\": true,\n//                     \"search\": true,\n//                     \"layers\": false,\n//                 }\n//             }\n//         };\n//         //add relational literature at catalog of Mirador\n//         for (const manifest of catalogContents) {\n//             config.catalog.push(manifest);\n//         }\n//     }\n//     else if (manifests.length == 4) { //four literature(Max)\n//         config = {\n//             id: \"viewer\",\n//             windows: [\n//                 {\n//                     loadedManifest: manifests[0]\n//                 },\n//                 {\n//                     loadedManifest: manifests[1]\n//                 },\n//                 {\n//                     loadedManifest: manifests[2]\n//                 },\n//                 {\n//                     loadedManifest: manifests[3]\n//                 }\n//             ],\n//             catalog: [\n//             ],\n//             window: {\n//                 highlightAllAnnotations: true,\n//                 sideBarOpen: false,\n//                 panels: {\n//                     \"info\": true,\n//                     \"attribution\": true,\n//                     \"canvas\": true,\n//                     \"annotations\": true,\n//                     \"search\": true,\n//                     \"layers\": false,\n//                 }\n//             }\n//         };\n//         //add relational literature at catalog of Mirador\n//         for (const manifest of catalogContents) {\n//             config.catalog.push(manifest);\n//         }\n//     }\n//     let mirador = new Mirador(config);\n// }\n\n\n//# sourceURL=webpack://nishiurearchives/./src/view.ts?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/view.ts"]();
/******/ 	
/******/ })()
;