/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (function() { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/view.ts":
/*!*********************!*\
  !*** ./src/view.ts ***!
  \*********************/
/***/ (function() {

eval("\r\n// // 2023/03/07\r\n// import Mirador from \"mirador\";\r\n// getCSV(new URL(\"database.csv\", \"http://127.0.0.1:5500/dist/\"));// 本番：パスを変更\r\n// //processes about CSV\r\n// function getCSV(URLObj: URL) {\r\n//     const req = new XMLHttpRequest();\r\n//     const url = new URL(URLObj);\r\n//     req.open(\"get\", url, true);\r\n//     req.send(null);\r\n//     //if csv could get, call convertCSVtoArray()\t\r\n//     req.onload = function () {\r\n//         convertCSVtoArray(req.responseText, URLObj);\r\n//     }\r\n// }\r\n// //chage CSV to two-dimensional array\r\n// function convertCSVtoArray(str: String, URLObj: URL) {\r\n//     let result = [];\r\n//     let result2 = [];\r\n//     let tmp = str.split(\"\\n\");\r\n//     if (URLObj.toString() == \"http://127.0.0.1:5500/dist/database.csv\") {//本番：パスの変更\r\n//         // create two-dimensional array separate each lows in \",\"\r\n//         for (let i = 0; i < tmp.length; ++i) {\r\n//             result[i] = tmp[i].split(',');\r\n//         }\r\n//         for (let i = 0; i < result.length; i++) {\r\n//             for (let o = 0; o < result[i].length; o++) {\r\n//                 if (result[i][o].indexOf(\"\\r\") != -1 && result[i][o] != undefined) {\r\n//                     result[i][o] = result[i][o].substr(0, result[i][o].indexOf(\"\\r\"))\r\n//                 }\r\n//             }\r\n//         }\r\n//         makeRelationalList(result);\r\n//         makeCatalogList(result);\r\n//     }\r\n// }\r\n// //get parameter from URL\r\n// function getParam(name: String, url: string) {\r\n//     if (url == \"\") url = window.location.href;\r\n//     name = name.replace(/[\\[\\]]/g, \"\\\\$&\");\r\n//     var regex = new RegExp(\"[?&]\" + name + \"(=([^&#]*)|&|#|$)\"),\r\n//         results = regex.exec(url);\r\n//     if (!results) return null;\r\n//     if (!results[2]) return '';\r\n//     return decodeURIComponent(results[2].replace(/\\+/g, \" \"));\r\n// }\r\n// const manifest = getParam(\"manifest1\", \"\");\r\n// function makeRelationalList(result: String[][]) {\r\n//     let manifests = [];\r\n//     let manifestCategory = 0;\r\n//     if (manifest !== null) {\r\n//         manifestCategory = Number(manifest.substr((manifest.indexOf(\".json\") - 1), 1));\r\n//         for (let i = 3; i < result[manifestCategory - 1].length; i++) {\r\n//             manifests.push({ author: result[manifestCategory - 1][i], title: result[manifestCategory - 1][++i], url: result[manifestCategory - 1][++i] });\r\n//         }\r\n//     }\r\n//     let otherReferences = document.getElementById(\"other-references\");\r\n//     for (let i = 0; i < manifests.length; i++) {\r\n//         if (manifests[i].url != manifest && otherReferences !== null) {\r\n//             otherReferences.innerHTML += `\r\n//                 <div class='book-data'>\r\n//                     <a class='relation-link' href='./view.html?manifest1=${manifests[i].url}'>\r\n//                     <img class='book' src='./img/${manifests[i].author}_thumbnail.jpg' alt='thumbnail image'><br>\r\n//                     <p class='des'>${manifests[i].author}<br>${manifests[i].title}</p>\r\n//                 </div>`;\r\n//         }\r\n//     }\r\n// }\r\n// //make catalog list and give it to function making Mirador instance \r\n// function makeCatalogList(result: String[][]) {\r\n//     let catalogContents = [];\r\n//     let manifestCategory = 0\r\n//     if (manifest !== null) {\r\n//         manifestCategory = Number(manifest.substr((manifest.indexOf(\".json\") - 1), 1));\r\n//         for (let i = 0; i < result[manifestCategory - 1].length; i++) {\r\n//             if (result[manifestCategory - 1][i].indexOf('manifest') != -1) {\r\n//                 const manifestURL = result[manifestCategory - 1][i];\r\n//                 catalogContents.push({ manifestId: manifestURL });\r\n//             }\r\n//         }\r\n//     }\r\n//     makeMiradorInstance(catalogContents);\r\n// }\r\n// function makeMiradorInstance(catalogContents: any) {\r\n//     //get manifest from query\r\n//     let manifests = []\r\n//     let config: any = {};\r\n//     for (let i = 1; i <= 4; i++) {\r\n//         if (getParam(\"manifest\" + i, \"\") != null) {\r\n//             manifests.push(getParam(\"manifest\" + i, \"\"));\r\n//         }\r\n//     }\r\n//     if (manifests.length == 1) { // one literature\r\n//         config = {\r\n//             id: \"viewer\",\r\n//             windows: [\r\n//                 {\r\n//                     loadedManifest: manifests[0]\r\n//                 }\r\n//             ],\r\n//             catalog: [{\r\n//             }\r\n//             ],\r\n//             window: {\r\n//                 highlightAllAnnotations: true,\r\n//                 sideBarOpen: true,\r\n//                 panels: {\r\n//                     \"info\": true,\r\n//                     \"attribution\": true,\r\n//                     \"canvas\": true,\r\n//                     \"annotations\": true,\r\n//                     \"search\": true,\r\n//                     \"layers\": false,\r\n//                 }\r\n//             }\r\n//         };\r\n//         // //add relational literature at catalog of Mirador\r\n//         // for (manifest of catalogContents) {\r\n//         //     config.catalog.push(manifest);\r\n//         // }\r\n//         //わからん\r\n//         for (const manifest of catalogContents) {\r\n//             config.catalog.push(manifest);\r\n//         }\r\n//     } else if (manifests.length == 2) { //two literature\r\n//         config = {\r\n//             id: \"viewer\",\r\n//             windows: [\r\n//                 {\r\n//                     loadedManifest: manifests[0]\r\n//                 },\r\n//                 {\r\n//                     loadedManifest: manifests[1]\r\n//                 }\r\n//             ],\r\n//             catalog: [\r\n//             ],\r\n//             window: {\r\n//                 highlightAllAnnotations: true,\r\n//                 sideBarOpen: false,\r\n//                 panels: {\r\n//                     \"info\": true,\r\n//                     \"attribution\": true,\r\n//                     \"canvas\": true,\r\n//                     \"annotations\": true,\r\n//                     \"search\": true,\r\n//                     \"layers\": false,\r\n//                 }\r\n//             }\r\n//         };\r\n//         //add relational literature at catalog of Mirador\r\n//         for (const manifest of catalogContents) {\r\n//             config.catalog.push(manifest);\r\n//         }\r\n//     }\r\n//     else if (manifests.length == 3) { //three literature\r\n//         config = {\r\n//             id: \"viewer\",\r\n//             windows: [\r\n//                 {\r\n//                     loadedManifest: manifests[0]\r\n//                 },\r\n//                 {\r\n//                     loadedManifest: manifests[1]\r\n//                 },\r\n//                 {\r\n//                     loadedManifest: manifests[2]\r\n//                 }\r\n//             ],\r\n//             catalog: [\r\n//             ],\r\n//             window: {\r\n//                 highlightAllAnnotations: true,\r\n//                 sideBarOpen: false,\r\n//                 panels: {\r\n//                     \"info\": true,\r\n//                     \"attribution\": true,\r\n//                     \"canvas\": true,\r\n//                     \"annotations\": true,\r\n//                     \"search\": true,\r\n//                     \"layers\": false,\r\n//                 }\r\n//             }\r\n//         };\r\n//         //add relational literature at catalog of Mirador\r\n//         for (const manifest of catalogContents) {\r\n//             config.catalog.push(manifest);\r\n//         }\r\n//     }\r\n//     else if (manifests.length == 4) { //four literature(Max)\r\n//         config = {\r\n//             id: \"viewer\",\r\n//             windows: [\r\n//                 {\r\n//                     loadedManifest: manifests[0]\r\n//                 },\r\n//                 {\r\n//                     loadedManifest: manifests[1]\r\n//                 },\r\n//                 {\r\n//                     loadedManifest: manifests[2]\r\n//                 },\r\n//                 {\r\n//                     loadedManifest: manifests[3]\r\n//                 }\r\n//             ],\r\n//             catalog: [\r\n//             ],\r\n//             window: {\r\n//                 highlightAllAnnotations: true,\r\n//                 sideBarOpen: false,\r\n//                 panels: {\r\n//                     \"info\": true,\r\n//                     \"attribution\": true,\r\n//                     \"canvas\": true,\r\n//                     \"annotations\": true,\r\n//                     \"search\": true,\r\n//                     \"layers\": false,\r\n//                 }\r\n//             }\r\n//         };\r\n//         //add relational literature at catalog of Mirador\r\n//         for (const manifest of catalogContents) {\r\n//             config.catalog.push(manifest);\r\n//         }\r\n//     }\r\n//     let mirador = new Mirador(config);\r\n// }\r\n\n\n//# sourceURL=webpack://nishiurearchives/./src/view.ts?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/view.ts"]();
/******/ 	
/******/ })()
;